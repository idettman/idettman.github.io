// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	var getModule, getRequire, require;
	getModule = (function (wrap) {
		return function (scope, tree, path, fullpath) {
			var name, dir, exports, module, fn, isDir;
			path = path.split('/');
			name = path.pop();
			if (!name) {
				isDir = true;
				name = path.pop();
			}
			if ((name === '.') || (name === '..')) {
				path.push(name);
				name = '';
			}
			while ((dir = path.shift())) {
				if (dir === '..') {
					scope = tree.pop();
				} else if (dir !== '.') {
					tree.push(scope);
					scope = scope[dir];
					if (!scope) {
						throw new Error("Could not find module '" + fullpath + "'");
					}
				}
			}
			if (name) {
				if (!isDir && scope[name + '.js']) {
					name += '.js';
				}
				if (typeof scope[name] === 'object') {
					tree.push(scope);
					scope = scope[name];
					name = 'index.js';
				}
			} else {
				name = 'index.js';
			}
			fn = scope[name];
			if (!fn) throw new Error("Could not find module '" + fullpath + "'");
			if (fn.hasOwnProperty('module')) return fn.module.exports;
			exports = {};
			fn.module = module = { exports: exports };
			fn.call(exports, exports, module, getRequire(scope, tree));
			return module.exports;
		};
	}(function (cmodule) {
		return function (ignore, module) {
			module.exports = cmodule.exports;
		};
	}));
	require = function (scope, tree, fullpath) {
		var name, path = fullpath, t = fullpath.charAt(0);
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			tree = [];
			path = path.slice(name.length + 1) || scope[':mainpath:'];
		}
		return getModule(scope, tree, path, fullpath);
	};
	getRequire = function (scope, tree) {
		return function (path) {
			return require(scope, [].concat(tree), path);
		};
	};
	return getRequire(modules, []);
})({
	"webassemble": {
		"test": {
			"src": {
				"date-util.js": function (exports, module, require) {
					'use strict';

					var StringUtil = require('./string-util.js').StringUtil;

					var DateUtil = (function () {
					    var lPadZero = function (num) {
					        return num < 10 ? '0' + num : num;
					    };

					    var DATE_ELEMENT_SEPARATOR = '/';

					    return {
					        DATE_FORMAT: 'yy' + DATE_ELEMENT_SEPARATOR + 'mm' + DATE_ELEMENT_SEPARATOR + 'dd',

					        formatDate: function (date) {
					            if (!(date instanceof Date)) {
					                return date;
					            }
					            return date.getFullYear() + DATE_ELEMENT_SEPARATOR +
					                lPadZero(date.getMonth() + 1) + DATE_ELEMENT_SEPARATOR +
					                lPadZero(date.getDate());
					        },

					        formatTime: function (date) {
					            if (!(date instanceof Date)) {
					                return date;
					            }

					            return lPadZero(date.getHours()) + ':' + lPadZero(date.getMinutes());
					        },

					        getDate: function (date) {
					            if (StringUtil.isBlank(date)) {
					                return null;
					            }
					            return date.split(' ')[0];
					        },

					        getTime: function (date) {
					            if (StringUtil.isBlank(date)) {
					                return null;
					            }
					            return date.split(' ')[1];
					        }
					    };
					})();

					exports.DateUtil = DateUtil;
				},
				"sameOutputFolder-pre.js": function (exports, module, require) {
					// ----- Exports from test/src/date-util.js -----
					exports.DateUtil = require('./date-util.js').DateUtil;

					// ----- Exports from test/src/string-util.js -----
					exports.StringUtil = require('./string-util.js').StringUtil;
				},
				"string-util.js": function (exports, module, require) {
					'use strict';

					var StringUtil = (function () {
					    return {
					        isBlank: function (str) {
					            return str === null || typeof(str) === 'undefined' || str.length === 0;
					        },

					        isNotBlank: function (str) {
					            return !this.isBlank(str);
					        }
					    };
					})();

					exports.StringUtil = StringUtil;
				}
			}
		}
	}
})("webassemble/test/src/sameOutputFolder-pre");
