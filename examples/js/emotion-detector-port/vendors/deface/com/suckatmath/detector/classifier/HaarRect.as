/*** @author Steve Shipman* @version 0.1*/package com.suckatmath.detector.classifier {	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * A simple class consisting of a Rectangle and a weight.  Rect is relative to original scale of HaarClassifier	 */	public class HaarRect {		/**		 * Original rectangle, as defined in xml file.  Relative to parent Feature.		 */		public var origrect:Rectangle;		/**		 * origrect, as scaled to current classifier size		 */		public var rect:Rectangle;		/**		 * Number by which to multiply pixel sum		 */		public var weight:Number; //float		/**		 * scaled and translated rectangle to use to get pixel sum from IntegralImage		 */		public var operatingRect:Rectangle;				public var classifier:HaarClassifier;				private var floor:Function = Math.floor; //unused, but coincidentally seems to improve performance.  who knows.		private var needRescale:Boolean = true;						/**		 * basic constructor		 * @param	x int x pixel location in classifier		 * @param	y int y pixel location in classifier		 * @param	w int width in pixels		 * @param	h int height in pixels		 * @param	lbs Number weight.		 */		public function HaarRect(x:int, y:int, w:int, h:int, lbs:Number) {			origrect = new Rectangle(x, y, w, h);			rect = origrect.clone();			operatingRect = rect.clone();			weight = lbs;		}				public function clone():HaarRect {			var toreturn:HaarRect = new HaarRect(origrect.x, origrect.y, origrect.width, origrect.height, weight);			return toreturn;		}				/**		 * serialize to xml.  Should be compatible with OpenCV, not guaranteed.		 * @return String rect as xml		 */		public function toXMLString():String {			var toreturn:String = "<_>" + origrect.x + " " + origrect.y + " " + origrect.width + " " + origrect.height + " " + weight + "</_>";			return toreturn;		}				/**		 * evaluates this rectangle on the image		 * 		 * @param	ii IntegralImage to get pixel sums from		 * @param	r Rectangle window in which to look		 * @param	tilted Boolean whether this is in a tilted feature		 * @return Number sum of pixel values in image, multiplied by weight		 */		public function evaluateSubImage(ii:IntegralImage, r:Rectangle, tilted:Boolean ):Number		{			if (needRescale) { rescale() };			operatingRect.x = r.x + rect.x;			operatingRect.y = r.y + rect.y;			var sum:Number = ii.getRectSum(operatingRect);			return sum * weight;		}				public function setClassifier(cfer:HaarClassifier):void {			this.classifier = cfer;		}				/**		 * scale to new size described by r		 * @param	w int original classifier width in pixels		 * @param	h int original classifier height in pixels		 * @param	r Rectangle describing search window		 */		public function setScale(s:int, r:Rectangle):void		{			needRescale = true;		}					public function rescale():void {			var scale:Number = classifier.width / classifier.origwidth;			rect.x = int(origrect.x * scale);			rect.y = int(origrect.y * scale);			rect.width = int(origrect.width * scale);			rect.height = int(origrect.height * scale);			operatingRect.width = rect.width;			operatingRect.height = rect.height; 			needRescale = false;		}			}	}